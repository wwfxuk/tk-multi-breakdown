from sgtk import Hook


class BaseBreakdownSceneOperations(Hook):
    def scan_scene(self):
        """
        The scan scene method is executed once at startup and its purpose is
        to analyze the current scene and return a list of references that are
        to be potentially operated on.

        The return data structure is a list of dictionaries. Each scene reference
        that is returned should be represented by a dictionary with three keys:

        - "node": The name of the 'node' that is to be operated on. Most DCCs have
          a concept of a node, path or some other way to address a particular
          object in the scene.
        - "type": The object type that this is. This is later passed to the
          update method so that it knows how to handle the object.
        - "path": Path on disk to the referenced object.

        Toolkit will scan the list of items, see if any of the objects matches
        any templates and try to determine if there is a more recent version
        available. Any such versions are then displayed in the UI as out of date.
        """
        raise NotImplementedError("'scan_scene' not implemented.")

    def update(self, items):
        """
        Perform replacements given a number of scene items passed from the app.

        Once a selection has been performed in the main UI and the user clicks
        the update button, this method is called.

        The items parameter is a list of dictionaries on the same form as was
        generated by the scan_scene hook above. The path key now holds
        the that each node should be updated *to* rather than the current path.
        """
        raise NotImplementedError("'update' not implemented.")

    def set_up_open_scene_callback(self, open_dialog_callback):
        """
        Use the application's open scene event hooks to open the Scene Breakdown
        dialog so artists can check their scene is up-to-date upon opening a
        version.

        If you do not require this functionality, simply do not implement this
        method in your hooks.

        :param open_dialog_callback: The method from the app to open the Scene
            Breakdown dialog.

        :returns: The item that will be used to remove the callback. E.g. Maya
            might require the generated callback id, whereas both houdini and nuke
            will require the actual callback function itself. A return value of
            `None` will result in no unregistering of the callback.
        """
        return

    def remove_open_scene_callback(self, callback_item):
        """
        Remove the callback assigned to the open scene event.

        :param callback_item: The object used to remove the callback. Either a method
            or event id, depending on the application being used.
        """
        if callback_item:
            msg = (
                "If you have implemented 'setup_open_scene_callback' you will "
                "have to also implement 'remove_open_scene_callback' or return "
                "`None` from the aforementioned method."
            )
            raise NotImplementedError(msg)
